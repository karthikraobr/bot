// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reviews.sql

package psql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const InsertReview = `-- name: InsertReview :one
INSERT INTO public.reviews
(product_id, customer_id, rating, review_text, created_at, last_modified_at, deleted_at)
VALUES($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT ON CONSTRAINT reviews_product_customer
DO UPDATE SET
    review_text = EXCLUDED.review_text,
    rating = EXCLUDED.rating,
    last_modified_at = EXCLUDED.last_modified_at,
    deleted_at = EXCLUDED.deleted_at
RETURNING id
`

type InsertReviewParams struct {
	ProductID      pgtype.Int4      `json:"product_id"`
	CustomerID     pgtype.Int4      `json:"customer_id"`
	Rating         int32            `json:"rating"`
	ReviewText     pgtype.Text      `json:"review_text"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	LastModifiedAt pgtype.Timestamp `json:"last_modified_at"`
	DeletedAt      pgtype.Timestamp `json:"deleted_at"`
}

func (q *Queries) InsertReview(ctx context.Context, arg InsertReviewParams) (int32, error) {
	row := q.db.QueryRow(ctx, InsertReview,
		arg.ProductID,
		arg.CustomerID,
		arg.Rating,
		arg.ReviewText,
		arg.CreatedAt,
		arg.LastModifiedAt,
		arg.DeletedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
